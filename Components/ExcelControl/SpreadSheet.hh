// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __SpreadSheet_hh__
#define __SpreadSheet_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_SpreadSheet
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_SpreadSheet
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_SpreadSheet
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StringSeq;

class StringSeq_var;

class StringSeq : public _CORBA_Unbounded_Sequence_String {
public:
  typedef StringSeq_var _var_type;
  inline StringSeq() {}
  inline StringSeq(const StringSeq& _s)
    : _CORBA_Unbounded_Sequence_String(_s) {}

  inline StringSeq(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence_String(_max) {}
  inline StringSeq(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}



  inline StringSeq& operator = (const StringSeq& _s) {
    _CORBA_Unbounded_Sequence_String::operator=(_s);
    return *this;
  }
};

class StringSeq_out;

class StringSeq_var {
public:
  inline StringSeq_var() : _pd_seq(0) {}
  inline StringSeq_var(StringSeq* _s) : _pd_seq(_s) {}
  inline StringSeq_var(const StringSeq_var& _s) {
    if( _s._pd_seq )  _pd_seq = new StringSeq(*_s._pd_seq);
    else              _pd_seq = 0;
  }
  inline ~StringSeq_var() { if( _pd_seq )  delete _pd_seq; }
    
  inline StringSeq_var& operator = (StringSeq* _s) {
    if( _pd_seq )  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline StringSeq_var& operator = (const StringSeq_var& _s) {
    if( _s._pd_seq ) {
      if( !_pd_seq )  _pd_seq = new StringSeq;
      *_pd_seq = *_s._pd_seq;
    } else if( _pd_seq ) {
      delete _pd_seq;
      _pd_seq = 0;
    }
    return *this;
  }
  inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline StringSeq* operator -> () { return _pd_seq; }
  inline const StringSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator StringSeq& () const { return *_pd_seq; }
#else
  inline operator const StringSeq& () const { return *_pd_seq; }
  inline operator StringSeq& () { return *_pd_seq; }
#endif
    
  inline const StringSeq& in() const { return *_pd_seq; }
  inline StringSeq&       inout()    { return *_pd_seq; }
  inline StringSeq*&      out() {
    if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline StringSeq* _retn() { StringSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class StringSeq_out;
  
private:
  StringSeq* _pd_seq;
};

class StringSeq_out {
public:
  inline StringSeq_out(StringSeq*& _s) : _data(_s) { _data = 0; }
  inline StringSeq_out(StringSeq_var& _s)
    : _data(_s._pd_seq) { _s = (StringSeq*) 0; }
  inline StringSeq_out(const StringSeq_out& _s) : _data(_s._data) {}
  inline StringSeq_out& operator = (const StringSeq_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline StringSeq_out& operator = (StringSeq* _s) {
    _data = _s;
    return *this;
  }
  inline operator StringSeq*&()  { return _data; }
  inline StringSeq*& ptr()       { return _data; }
  inline StringSeq* operator->() { return _data; }

  inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  StringSeq*& _data;

private:
  StringSeq_out();
  StringSeq_out& operator=(const StringSeq_var&);
};

_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StringList;

class StringList_var;

class StringList : public _CORBA_Unbounded_Sequence< StringSeq >  {
public:
  typedef StringList_var _var_type;
  inline StringList() {}
  inline StringList(const StringList& _s)
    : _CORBA_Unbounded_Sequence< StringSeq > (_s) {}

  inline StringList(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence< StringSeq > (_max) {}
  inline StringList(_CORBA_ULong _max, _CORBA_ULong _len, StringSeq* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence< StringSeq > (_max, _len, _val, _rel) {}



  inline StringList& operator = (const StringList& _s) {
    _CORBA_Unbounded_Sequence< StringSeq > ::operator=(_s);
    return *this;
  }
};

class StringList_out;

class StringList_var {
public:
  inline StringList_var() : _pd_seq(0) {}
  inline StringList_var(StringList* _s) : _pd_seq(_s) {}
  inline StringList_var(const StringList_var& _s) {
    if( _s._pd_seq )  _pd_seq = new StringList(*_s._pd_seq);
    else              _pd_seq = 0;
  }
  inline ~StringList_var() { if( _pd_seq )  delete _pd_seq; }
    
  inline StringList_var& operator = (StringList* _s) {
    if( _pd_seq )  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline StringList_var& operator = (const StringList_var& _s) {
    if( _s._pd_seq ) {
      if( !_pd_seq )  _pd_seq = new StringList;
      *_pd_seq = *_s._pd_seq;
    } else if( _pd_seq ) {
      delete _pd_seq;
      _pd_seq = 0;
    }
    return *this;
  }
  inline StringSeq& operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline StringList* operator -> () { return _pd_seq; }
  inline const StringList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator StringList& () const { return *_pd_seq; }
#else
  inline operator const StringList& () const { return *_pd_seq; }
  inline operator StringList& () { return *_pd_seq; }
#endif
    
  inline const StringList& in() const { return *_pd_seq; }
  inline StringList&       inout()    { return *_pd_seq; }
  inline StringList*&      out() {
    if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline StringList* _retn() { StringList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class StringList_out;
  
private:
  StringList* _pd_seq;
};

class StringList_out {
public:
  inline StringList_out(StringList*& _s) : _data(_s) { _data = 0; }
  inline StringList_out(StringList_var& _s)
    : _data(_s._pd_seq) { _s = (StringList*) 0; }
  inline StringList_out(const StringList_out& _s) : _data(_s._data) {}
  inline StringList_out& operator = (const StringList_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline StringList_out& operator = (StringList* _s) {
    _data = _s;
    return *this;
  }
  inline operator StringList*&()  { return _data; }
  inline StringList*& ptr()       { return _data; }
  inline StringList* operator->() { return _data; }

  inline StringSeq& operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  StringList*& _data;

private:
  StringList_out();
  StringList_out& operator=(const StringList_var&);
};

_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_FloatSeq;

class FloatSeq_var;

class FloatSeq : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Float, 4, 4 >  {
public:
  typedef FloatSeq_var _var_type;
  inline FloatSeq() {}
  inline FloatSeq(const FloatSeq& _s)
    : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Float, 4, 4 > (_s) {}

  inline FloatSeq(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Float, 4, 4 > (_max) {}
  inline FloatSeq(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Float* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Float, 4, 4 > (_max, _len, _val, _rel) {}



  inline FloatSeq& operator = (const FloatSeq& _s) {
    _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Float, 4, 4 > ::operator=(_s);
    return *this;
  }
};

class FloatSeq_out;

class FloatSeq_var {
public:
  inline FloatSeq_var() : _pd_seq(0) {}
  inline FloatSeq_var(FloatSeq* _s) : _pd_seq(_s) {}
  inline FloatSeq_var(const FloatSeq_var& _s) {
    if( _s._pd_seq )  _pd_seq = new FloatSeq(*_s._pd_seq);
    else              _pd_seq = 0;
  }
  inline ~FloatSeq_var() { if( _pd_seq )  delete _pd_seq; }
    
  inline FloatSeq_var& operator = (FloatSeq* _s) {
    if( _pd_seq )  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline FloatSeq_var& operator = (const FloatSeq_var& _s) {
    if( _s._pd_seq ) {
      if( !_pd_seq )  _pd_seq = new FloatSeq;
      *_pd_seq = *_s._pd_seq;
    } else if( _pd_seq ) {
      delete _pd_seq;
      _pd_seq = 0;
    }
    return *this;
  }
  inline ::CORBA::Float& operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline FloatSeq* operator -> () { return _pd_seq; }
  inline const FloatSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator FloatSeq& () const { return *_pd_seq; }
#else
  inline operator const FloatSeq& () const { return *_pd_seq; }
  inline operator FloatSeq& () { return *_pd_seq; }
#endif
    
  inline const FloatSeq& in() const { return *_pd_seq; }
  inline FloatSeq&       inout()    { return *_pd_seq; }
  inline FloatSeq*&      out() {
    if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline FloatSeq* _retn() { FloatSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class FloatSeq_out;
  
private:
  FloatSeq* _pd_seq;
};

class FloatSeq_out {
public:
  inline FloatSeq_out(FloatSeq*& _s) : _data(_s) { _data = 0; }
  inline FloatSeq_out(FloatSeq_var& _s)
    : _data(_s._pd_seq) { _s = (FloatSeq*) 0; }
  inline FloatSeq_out(const FloatSeq_out& _s) : _data(_s._data) {}
  inline FloatSeq_out& operator = (const FloatSeq_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline FloatSeq_out& operator = (FloatSeq* _s) {
    _data = _s;
    return *this;
  }
  inline operator FloatSeq*&()  { return _data; }
  inline FloatSeq*& ptr()       { return _data; }
  inline FloatSeq* operator->() { return _data; }

  inline ::CORBA::Float& operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  FloatSeq*& _data;

private:
  FloatSeq_out();
  FloatSeq_out& operator=(const FloatSeq_var&);
};

_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_FloatList;

class FloatList_var;

class FloatList : public _CORBA_Unbounded_Sequence< FloatSeq >  {
public:
  typedef FloatList_var _var_type;
  inline FloatList() {}
  inline FloatList(const FloatList& _s)
    : _CORBA_Unbounded_Sequence< FloatSeq > (_s) {}

  inline FloatList(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence< FloatSeq > (_max) {}
  inline FloatList(_CORBA_ULong _max, _CORBA_ULong _len, FloatSeq* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence< FloatSeq > (_max, _len, _val, _rel) {}



  inline FloatList& operator = (const FloatList& _s) {
    _CORBA_Unbounded_Sequence< FloatSeq > ::operator=(_s);
    return *this;
  }
};

class FloatList_out;

class FloatList_var {
public:
  inline FloatList_var() : _pd_seq(0) {}
  inline FloatList_var(FloatList* _s) : _pd_seq(_s) {}
  inline FloatList_var(const FloatList_var& _s) {
    if( _s._pd_seq )  _pd_seq = new FloatList(*_s._pd_seq);
    else              _pd_seq = 0;
  }
  inline ~FloatList_var() { if( _pd_seq )  delete _pd_seq; }
    
  inline FloatList_var& operator = (FloatList* _s) {
    if( _pd_seq )  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline FloatList_var& operator = (const FloatList_var& _s) {
    if( _s._pd_seq ) {
      if( !_pd_seq )  _pd_seq = new FloatList;
      *_pd_seq = *_s._pd_seq;
    } else if( _pd_seq ) {
      delete _pd_seq;
      _pd_seq = 0;
    }
    return *this;
  }
  inline FloatSeq& operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline FloatList* operator -> () { return _pd_seq; }
  inline const FloatList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator FloatList& () const { return *_pd_seq; }
#else
  inline operator const FloatList& () const { return *_pd_seq; }
  inline operator FloatList& () { return *_pd_seq; }
#endif
    
  inline const FloatList& in() const { return *_pd_seq; }
  inline FloatList&       inout()    { return *_pd_seq; }
  inline FloatList*&      out() {
    if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline FloatList* _retn() { FloatList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class FloatList_out;
  
private:
  FloatList* _pd_seq;
};

class FloatList_out {
public:
  inline FloatList_out(FloatList*& _s) : _data(_s) { _data = 0; }
  inline FloatList_out(FloatList_var& _s)
    : _data(_s._pd_seq) { _s = (FloatList*) 0; }
  inline FloatList_out(const FloatList_out& _s) : _data(_s._data) {}
  inline FloatList_out& operator = (const FloatList_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline FloatList_out& operator = (FloatList* _s) {
    _data = _s;
    return *this;
  }
  inline operator FloatList*&()  { return _data; }
  inline FloatList*& ptr()       { return _data; }
  inline FloatList* operator->() { return _data; }

  inline FloatSeq& operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  FloatList*& _data;

private:
  FloatList_out();
  FloatList_out& operator=(const FloatList_var&);
};

_CORBA_MODULE SpreadSheet

_CORBA_MODULE_BEG

#ifndef __SpreadSheet_mmSpreadSheet__
#define __SpreadSheet_mmSpreadSheet__

  class mSpreadSheet;
  class _objref_mSpreadSheet;
  class _impl_mSpreadSheet;
  
  typedef _objref_mSpreadSheet* mSpreadSheet_ptr;
  typedef mSpreadSheet_ptr mSpreadSheetRef;

  class mSpreadSheet_Helper {
  public:
    typedef mSpreadSheet_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_mSpreadSheet, mSpreadSheet_Helper> mSpreadSheet_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_mSpreadSheet,mSpreadSheet_Helper > mSpreadSheet_out;

#endif

  // interface mSpreadSheet
  class mSpreadSheet {
  public:
    // Declarations for this interface type.
    typedef mSpreadSheet_ptr _ptr_type;
    typedef mSpreadSheet_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_mSpreadSheet :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    char* get_string(const char* l, const char* c, const char* sn);
    void set_value(const char* l, const char* c, const char* sn, ::CORBA::Float v);
    StringList* get_string_range(const char* l1, const char* c1, const char* l2, const char* c2, const char* sn);
    void set_value_range(const char* l, const char* c, const char* sn, const ::FloatList v);
    void set_string(const char* l, const char* c, const char* sn, const char* v);
    void set_string_range(const char* l, const char* c, const char* sn, const ::StringList v);

    inline _objref_mSpreadSheet()  { _PR_setobj(0); }  // nil
    _objref_mSpreadSheet(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_mSpreadSheet();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_mSpreadSheet(const _objref_mSpreadSheet&);
    _objref_mSpreadSheet& operator = (const _objref_mSpreadSheet&);
    // not implemented

    friend class mSpreadSheet;
  };

  class _pof_mSpreadSheet : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_mSpreadSheet() : _OMNI_NS(proxyObjectFactory)(mSpreadSheet::_PD_repoId) {}
    virtual ~_pof_mSpreadSheet();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_mSpreadSheet :
    public virtual omniServant
  {
  public:
    virtual ~_impl_mSpreadSheet();

    virtual char* get_string(const char* l, const char* c, const char* sn) = 0;
    virtual void set_value(const char* l, const char* c, const char* sn, ::CORBA::Float v) = 0;
    virtual StringList* get_string_range(const char* l1, const char* c1, const char* l2, const char* c2, const char* sn) = 0;
    virtual void set_value_range(const char* l, const char* c, const char* sn, const ::FloatList v) = 0;
    virtual void set_string(const char* l, const char* c, const char* sn, const char* v) = 0;
    virtual void set_string_range(const char* l, const char* c, const char* sn, const ::StringList v) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_mSpreadSheet;

_CORBA_MODULE_END



_CORBA_MODULE POA_SpreadSheet
_CORBA_MODULE_BEG

  class mSpreadSheet :
    public virtual SpreadSheet::_impl_mSpreadSheet,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~mSpreadSheet();

    inline ::SpreadSheet::mSpreadSheet_ptr _this() {
      return (::SpreadSheet::mSpreadSheet_ptr) _do_this(::SpreadSheet::mSpreadSheet::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_SpreadSheet
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const StringSeq& _s);
void operator<<=(::CORBA::Any& _a, StringSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, StringSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const StringSeq*& _sp);

void operator<<=(::CORBA::Any& _a, const StringList& _s);
void operator<<=(::CORBA::Any& _a, StringList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, StringList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const StringList*& _sp);

void operator<<=(::CORBA::Any& _a, const FloatSeq& _s);
void operator<<=(::CORBA::Any& _a, FloatSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, FloatSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const FloatSeq*& _sp);

void operator<<=(::CORBA::Any& _a, const FloatList& _s);
void operator<<=(::CORBA::Any& _a, FloatList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, FloatList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const FloatList*& _sp);

void operator<<=(::CORBA::Any& _a, SpreadSheet::mSpreadSheet_ptr _s);
void operator<<=(::CORBA::Any& _a, SpreadSheet::mSpreadSheet_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, SpreadSheet::mSpreadSheet_ptr& _s);



inline void
SpreadSheet::mSpreadSheet::_marshalObjRef(::SpreadSheet::mSpreadSheet_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_SpreadSheet
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_SpreadSheet
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_SpreadSheet
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_SpreadSheet
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_SpreadSheet
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_SpreadSheet
#endif

#endif  // __SpreadSheet_hh__

